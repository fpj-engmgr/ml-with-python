0-D: a number
1-D: an array of number

Tensor types
- float   
    torch.*.FloatTensor     (torch.float32)
    torch.*.DoubleTensor    (torch.float64)
    torch.*.HalfTensor      (torch.float16)
- integer
    torch.*.ByteTensor      (torch.uint8)
    torch.*.CharTensor      (torch.int8)
    torch.*.ShortTensor     (torch.int16)
    torch.*.IntTensor       (torch.int32)
    torch.*.LongTensor      (torch.int64)
#
import torch
a=torch.tensor([7, 4, 3, 2, 6])
a.dtype
b=torch.tensor([7.1, 4.3, 3.14, 2.73, 6.0], dtype=torch.float32)
#
# create a 2-d from a 1-d
c=torch.tensor([7, 4, 3, 2, 6])
c_col=c.view(5,1)
or 
c_col=c.vuew(-1,1)
#
numpy_array=np.array([7.1, 4.3, 3.14, 2.73, 6.0])
torch_tensor = torch.from_numpy(numpy_array)

# Vector addition
just use 1-d tensors!
# multiplication with a scalar
just multiply!
# vector product (z = u * v)
just multiply tensors
# dot product
torch.dot(u, v)
# add a constant
just add it (broadcasting)
# mean (average of all elements)
# max
# multiplication

linspace:
torch.linspace(start, end, num=steps)
