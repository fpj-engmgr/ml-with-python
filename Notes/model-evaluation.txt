Split data set into training and testing

Scikit-learn has thr capability to split the data set randomly

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.3, random_state=0)

 Too much training data causes the precision to go down

 Cross-validation
 - K-fold method (e.g. 4 fold with 25% testing and 75% training)

 from sklearn.model_selection import cross_val_score
 scores = cross_val_score(lr, x_data, y_data, cv=3)
 - scores is an array
 np.mean(scores) gets the average

from sklearn.model_selection import cross_val_predict
Yhat = cross_val_predict(lr2e, x_data, y_data, cv=3)

Overfitting, Underfitting and Model Selection 
- Overfitting: if the model starts fitting the noise rather than the function

Training error increases with increasing the order of the polynomial

# Plot R^2 against order of polynomial
Rsquared_test = []
order=[1, 2, 3, 4]

for ndeg in order:
    pr=PolynomialFeatures(degree=ndeg)
    x_train_pr=pr.fit_transform(x_train[['horsepower']])
    x_test_pr=pr.fit_transform(x_test[['horsepower']])
    lr.fit(x_train_pr, y_train)
    Rsquared_test.append(lr.score(x_test_pr, y_test))

Ridge Regression
- Intent is to prevent overfitting 
- Alpha is a parameter to attenuate for overfitting
  - 
from sklearn.linear_model import Ridge
RidgeModel = Ridge(alpha=0.1)
RidgeModel.fit(X,y)
Yhat = RidgeModel.predict(X)

Grid Search
- Enables iterating over hyperparameters, such as Alpha
sklearn.linear_model.Ridge
parameters = [ {'alpha': [1, 10, 100, 1000]}]
e.g.
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV

parameters1 = [{'alpha': [0.001, 0.1, 1, 10, 100, 1000, 10000, 100000, 1000000]}]
RR = Ridge()
Grid1 = GridSearchCV(RR, parameters1, cv=4)
Grid1.fit(x_data[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']], y_data)
Grid1.best_estimator_
scores = Grid1.cv_results_
scores['mean_test_score']

parameters1 = [{'alpha': [0.001, 0.1, 1, 10, 100, 1000, 10000, 100000, 1000000], 
                'normalize': [True, False] }]